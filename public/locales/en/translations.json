{
  "home": {
    "title": "Home",
    "firstDescription": "Hi, <br />I'm <strong>Yasaman</strong>",
    "secondDescription": "If you are looking for a Frontend engineer <br /> who has a huge enthusisem for <br/> translating UI concept into visually intresting <br /> and <br/> a keen eye for coordination with design <br/><strong>I'm here. </strong>",
    "location": "Based in Berlin",
    "position": "Frontend engineer",
    "btnName": "Contact Me",
    "downloadResumeTooltip": "Download Resume",
    "metaTooltip": "Meta Front-End developer certificate",
    "figmaTooltip": "Portfolio Figma Plan"
  },
  "aboutMe": {
    "title": "About me",
    "description": "<br />I began my journey as a test engineer, where I gained experience in various types of testing, such as <strong>unit testing</strong>, <strong>end-to-end testing</strong>, and <strong>integration testing</strong>. These experiences helped me develop a keen eye for detail and also what is important for end users. <br />As I delved deeper into frontend development, React and Vue.js sparked my interest. In my first frontend developer role, I crafted over 20 pages for both <strong>mobile</strong> and <strong>desktop displays</strong> using Vue.js, SASS, BEM, and Bootstrap-Vue. Later, I developed a dashboard for an online payment company using <strong>React</strong>, <strong>TypeScript</strong>, Styled-Components, Tailwind, and Figma. Throughout my career, I've collaborated with numerous teams in environments that employed <strong>Agile methodologies</strong> and Scrum.<br />To expand my React skills, I participated in Meta's Front-End Developer Certificate program, which was incredibly helpful and deepened my knowledge of Figma and other tools. <br/> I firmly believe that while tools are important, maintaining a passion for learning is even more crucial. This enthusiasm not only contributes to the growth of companies but also help them creating expert individual developers."
  },
  "contactMe": {
    "title": "Contact me",
    "mainTitle": "Contact me",
    "phone": "+4917675408446",
    "emailNameTitle": "Your name",
    "email": "info@yasaman.dev",
    "emailTitle": "Email address",
    "emailSubject": "Email subject",
    "emailMessage": "Your message",
    "location": "Berlin, Germany",
    "socialTitle": "Follow me on social media:",
    "btnSubmit": "Submit"
  },
  "portfolio": {
    "title": "Portfolio"
  },
  "courses": {
    "title": "Certifications"
  },
  "experienceEducation": "Experiences/Educations",
  "experiences": {
    "title": "Work Experiences",
    "zibal": {
      "name": "Zibal",
      "position": "Front-End engineer",
      "startDate": "June 2022",
      "endDate": "Jan 2025",
      "description": "Zibal is an online payment company offering financial and payment solutions for businesses of all sizes. As part of Zibal's dashboard project, I contributed to creating dashboards that allow end users to monitor the status of financial transactions and generate reports.<br/> I was responsible for developing and maintaining the frontend dashboard, working closely with cross-functional teams to ensure seamless integration and a user-friendly interface.<br/>By conducting code reviews and troubleshooting, I promoted a culture of high-quality code and continuous improvement.<br/>The team comprised one DevOps engineer, three backend developers, one Scrum Master, and one QA specialist.",
      "linkedinAddress": "https://www.linkedin.com/company/zibalco/",
      "websiteAddress": "https://zibal.ir",
      "logoAddress": "https://media.licdn.com/dms/image/C4D0BAQHi3aAtN3CRbQ/company-logo_200_200/0/1630576922514?e=2147483647&v=beta&t=9BXxKYTh0-HPcd5x_4O96Hqx-A-NAoOsZOLuQoSEuds",
      "skills": "React - TypeScript - Styled-component - Tailwind - GraphQL - CSS - HTML - GitHub - Figma - Scrum"
    },
    "Lastsecond": {
      "name": "Lastsecond",
      "position": "Front-End engineer",
      "startDate": "December 2020",
      "endDate": "March 2022",
      "description": "Lastsecond is a website focused on travel and tourism in Iran. I worked as a front-end developer at LastSecond.ir, a Persian hotel and flight reservation website. My responsibilities included refactoring the company's website from an outdated framework to a new one that utilized Vue.js and Sass. The main aim was to create a mobile and desktop-friendly design. I had to rewrite the main pages for tours, hotels, flights, itineraries, blogs, restaurants, videos, and attractions. <br><br>To ensure the project aligned with the objectives, I collaborated effectively with backend developers, UI/UX designers, and the product manager. This involved clear and consistent communication throughout the process.",
      "linkedinAddress": "https://www.linkedin.com/company/lastsecond/?originalSubdomain=ir",
      "websiteAddress": "https://lastsecond.ir/",
      "logoAddress": "https://pbs.twimg.com/profile_images/1230005817832886272/raLLVHAj_400x400.jpg",
      "skills": "Vue.js - Bootstrap-Vue - Bootstrap - HTML - Javasciprt - SASS - Linux - GitLab - Zeplin - Scrum - BEM"
    },
    "Chargoon": {
      "name": "Chargoon",
      "position": "QA engineer",
      "startDate": "March 2016",
      "endDate": "April 2020",
      "description": "Chargoon is a major platform in the human resources community. During my journey as a Manual QA Engineer at Chargoon, a company that offers office automation solutions, human resources, finance, and other e-commerce tools.<br/> I was responsible for testing three distinct platforms: the Contract and Salary Platform, the Organization Platform, and the Employment Platform.<br/> TFS was effectively utilized to create, test, and communicate bugs with the development team. <br/><br/> As a QA, I performed unit testing on each feature as well as end-to-end testing. <br/>Also I collaborated with a team of over 10 developers, 3 Scrum masters, and 2 test engineers to ensure that testing processes were efficient and seamless.",
      "linkedinAddress": "https://www.linkedin.com/company/chargoon/",
      "websiteAddress": "https://www.chargoon.com/",
      "logoAddress": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQacszHRS5oVtwErQ8TDlJ0LEFHT5xpi9oe6vl3ZeL_Fw&s",
      "skills": "TFS - Unit testing - End to End testing - Integration test - Scrum"
    }
  },
  "education": {
    "title": "Educations",
    "coursea": {
      "name": "Meta Front-End Developer",
      "position": "Coursea",
      "startDate": "January 2024",
      "endDate": "May 2024",
      "description": "Meta Course",
      "linkedinAddress": "https://www.linkedin.com/in/yasaman-behnam-malekzadeh/details/certifications/",
      "websiteAddress": "https://www.coursera.org/account/accomplishments/specialization/certificate/697CY3FTQTKT",
      "logoAddress": "https://cdn.pixabay.com/photo/2021/12/14/22/29/meta-6871457_1280.png",
      "skills": "React - Jest - Principles of UX/UI Design - Figma - Version control - Javascript - CSS - HTML5"
    },
    "master": {
      "name": "Computer System Networking and Telecommunications",
      "position": "Master",
      "startDate": "2018",
      "endDate": "2022",
      "description": "Iran University of Science and Technology",
      "linkedinAddress": "https://www.linkedin.com/company/iran-university-of-science-and-technology---iust/",
      "websiteAddress": "https://www.iust.ac.ir/en",
      "logoAddress": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTS-vOLKUHqfArZL-lQREZyA7GawqfIQQD8d-U-ixSQx4wLJt8-ndf_nj5QUW9TGSeIKEo&usqp=CAU",
      "skills": ""
    },
    "bachelor": {
      "name": "Information Technology",
      "position": "Bachelor",
      "startDate": "2010",
      "endDate": "2014",
      "description": "K . N . Toosi University of Technology",
      "linkedinAddress": "https://www.linkedin.com/school/kntoosi/?originalSubdomain=ir",
      "websiteAddress": "https://en.kntu.ac.ir/",
      "logoAddress": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQJ1yWlcro0afcO0XN3HFcgg32ILkzRWOJejJyhOo5Zrw&s",
      "skills": ""
    }
  },
  "projects": {
    "title": "Some simple projects",
    "portfolio": {
      "name": "portfolio",
      "description": "My personal website which show my Experiences, Education and also some simple projects. It's a two languages website."
    },
    "applications": {
      "name": "List of Applications",
      "description": "A simple website with sign up and sign in and also show a list of applications with adding, editing and deleting application."
    },
    "githubUser": {
      "name": "List of Github users",
      "description": "A simple website which shows a list of github user with pagination and also a page of each github user with their information."
    }
  },
  "myBlog": {
    "title": "More Than Code: Thoughts, Interests, and Insights from a Developer’s Perspective:",
    "FrontEnd": {
      "title": "Front-End",
      "subject1": {
        "title": "Which One Should You Use? Styled-Components, Tailwind, Sass, or Bootstrap?",
        "description": "You’ve ever found yourself drowning in CSS files or Googling 'how to center a div' for the hundredth time (we've all been there), you’ve probably thought about using a CSS framework or library to make your life easier. But with so many options out there, how do you choose? Let’s break it down!### Styled-ComponentsStyled-components are perfect if you love writing JavaScript and want your styles to live right next to your components. No more switching between files — just write your CSS directly in your JS/TS files.**Pros:**- Scoped styles by default (goodbye, accidental global styles!)- Dynamic styling with props- Great for component-based projects like React**Cons:**- Can get messy with complex components- Slightly larger bundle sizeBest for: React lovers who want everything in one place.### Tailwind CSSTailwind is like having a never-ending list of utility classes at your fingertips. It might look weird at first, but once you get used to it, you can build layouts crazy fast without writing a single custom CSS rule.**Pros:**- Speedy development with pre-made classes- Highly customizable with a config file- No need to come up with class names (goodbye, `container-wrapper-content-main`)**Cons:**- Class-heavy HTML can get cluttered- Learning curve for utility-first mindsetBest for: Developers who want speed and flexibility.### SassSass is like CSS but with superpowers. You get variables, nesting, mixins, and more. It doesn’t change how you structure your styles too much, but it makes writing CSS way more enjoyable.**Pros:**- More organized, DRY code- Powerful features like loops and functions- Easy to migrate from regular CSS**Cons:**- Needs to be compiled- Can still lead to large, tangled stylesheets if not managed wellBest for: Traditionalists who want modern features### BootstrapBootstrap is the OG of CSS frameworks. It comes with pre-styled components, responsive grids, and everything you need to spin up a functional, good-looking site quickly.**Pros:**- Tons of built-in components- Mobile-first and responsive out of the box- Huge community and lots of resources**Cons:**- Sites can look very 'Bootstrap-y' unless heavily customized- Can feel bloated for small projectsBest for: Quick prototypes or when you want something that just works.### So, Which One’s Better?Honestly? It depends on your project and your vibe as a developer. If you want lightning-fast development, Tailwind’s your buddy. Love React and want scoped styles? Styled-components. Need CSS to feel powerful? Sass. Want an all-in-one toolkit? Bootstrap’s got your back.The best part? You can even mix and match! Use Tailwind for layout, Styled-components for isolated React components, and sprinkle in a little Sass for global styles.At the end of the day, pick the tool that makes coding fun for you. Because happy devs build awesome things. 🚀What’s your favorite CSS tool? Let’s chat in the comments!",
        "img": "https://media.licdn.com/dms/image/v2/D4D12AQFXOhxYbdhqPg/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1695402652598?e=2147483647&v=beta&t=aRD89Ezc-K7SjKVc30bHXybg0OhzrI6sIZ2LyS0ZrvM",
        "date": "2025-02-24"
      },
      "subject2": {
        "title": "Why Is TypeScript Important?",
        "description": "Okay, so you’ve probably heard people talking about TypeScript, and you might be wondering — what’s the big deal? Isn’t JavaScript enough? Well, not exactly. Let me break it down.<br/>**It Catches Your Mistakes Early**<br/>TypeScript is like a helpful buddy who taps you on the shoulder and says, “Hey, you messed up,” *before* your code even runs. It checks your code for errors while you’re writing it, so you don’t end up scratching your head for hours later, wondering why everything is broken.<br/>**It Makes Your Code Easier to Understand**<br/>When your project grows, it’s easy to forget what each part of your code is supposed to do. TypeScript lets you add types to your variables and functions, so you (and your teammates) can quickly figure out what’s going on without digging through files for hours.<br/>**Better Autocomplete and Suggestions**<br/>If you’ve ever wished your code editor could read your mind, TypeScript is pretty close. It gives you smart autocompletion and suggestions, making writing code faster and way less frustrating.<br/>**It Helps with Big Projects**<br/>For small projects, JavaScript might be fine, but as soon as your app gets bigger, things can get messy fast. TypeScript helps keep things organized and makes it way easier to refactor or add new features without accidentally breaking everything.<br/>**It’s Super Popular (for a Reason)**<br/>A lot of big companies use TypeScript because it makes their code more reliable and easier to maintain. So, if you learn it, you’ll not only level up your skills but also open up more job opportunities.<br/>**So, Should You Use It?**<br/>If you’re serious about web development, learning TypeScript is 100% worth it. It might seem like extra work at first, but it saves you so much time and stress in the long run. Plus, once you get used to it, you’ll wonder how you ever lived without it!<br/>",
        "img": "https://www.orientsoftware.com/Themes/Content/Images/blog/2023-11-13/typescript-introduction.jpg",
        "date": "2025-02-23"
      },
      "subject3": {
        "title": "How to maintain weight",
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut purus eget nunc",
        "img": "img1.jpg",
        "date": "2021-09-01"
      }
    },
    "Test": {
      "title": "Test",
      "subject1": {
        "title": "Why Testing in Frontend Is Super Important (and Should You Use Jest or Playwright?)",
        "description": "Okay, let’s talk about something we all kinda avoid but know we shouldn’t: testing our frontend code. Yeah, I know, writing tests isn’t exactly the most thrilling part of building a web app, but trust me — it saves you from headaches later on. Let’s break it down!<br/>Why Even Bother Testing?<br/>Imagine you push some shiny new feature to production, feeling all proud... and boom — users start complaining that something else is broken. 😩 Testing helps catch these issues before they hit real users, so you don’t end up fixing bugs at midnight with coffee-fueled panic.<br/>With proper tests, you can:<br/>- Avoid regressions: Make sure old features don’t break when adding new ones.<br/>- Boost confidence: Push updates without holding your breath.<br/>- Document your app: Tests can serve as a living guide on how components should behave.<br/>Basically, testing makes your life easier in the long run — even if it feels like extra work upfront.<br/> Jest vs Playwright: Which One Should You Use?<br/>Now that you’re (hopefully) convinced that testing is worth it, the next question is: what tool should you use? Jest and Playwright are two popular options, but they serve slightly different purposes. Let’s compare!<br/>Jest <br/>Jest is like your reliable best friend for unit and component tests. It’s great for testing individual pieces of your app, like functions or React components, in isolation.<br/>Pros:<br/>- Super fast (no need to run a browser).<br/>- Built-in mocking and spies.<br/>- Works seamlessly with React, Vue, and most frameworks.<br/>Cons:<br/>- Doesn’t test real browser interactions.<br/>- You might miss bugs that only appear in a full browser environment.<br/>Playwright<br/>Playwright, on the other hand, is all about end-to-end (E2E) testing. It actually launches a real browser and mimics what a user would do — clicking buttons, filling forms, and navigating your app.<br/>Pros:<br/>- Catches UI issues that Jest might miss.<br/>- Can test across different browsers and devices.<br/>- Handles complex scenarios like file uploads or authentication.<br/>Cons:<br/>- Slower than Jest (because browsers take time to start).<br/>- More setup required.<br/>So, Which One Should You Pick?<br/>Honestly? Both.<br/>- Use 'Jest'for unit and component tests (fast and easy to run).<br/>- Use 'Playwright' for critical user flows (like logging in, signing up, or checking out).<br/>This way, you get the best of both worlds: fast feedback for small pieces of your app, and solid protection against breaking key user journeys.<br/>Final Thoughts<br/>Testing isn’t the most glamorous part of frontend development, but it’s 100% worth the effort. Start small, add tests gradually, and your future self will thank you. And whether you go with Jest, Playwright, or both — just start testing!<br/>What do you think? Do you have a favorite testing tool? Let me know in the comments! ",
        "img": "https://blog.qatestlab.com/wp-content/uploads/2016/07/testing_26_04_2016_new.jpg",
        "date": "2025-02-27"
      },
      "subject2": {
        "title": "End-to-End Testing vs. Unit Testing: What’s the Difference, and Which One Really Matters?",
        "description": "If you’ve been coding for a while, you’ve probably heard people throw around terms like *unit tests* and *end-to-end (E2E) tests*. But what do they actually mean, and which one should you care more about? Let’s break it down — without all the jargon.<br/>🧩 What is Unit Testing?<br/>Unit testing is like checking the smallest pieces of your code individually to make sure they work. Imagine you’re building a LEGO castle: a unit test makes sure each brick is sturdy and fits properly before you start stacking them.<br/>In coding terms, a unit test checks small, isolated functions or components. For example, if you’ve got a function that adds two numbers, a unit test makes sure that `add(2, 3)` always returns `5`. It doesn’t care about anything outside that function — just that it works as expected.<br/>- Pros: Fast, easy to write, catches small bugs early.<br/>- Cons: Can give a false sense of security — just because all the bricks work doesn’t mean the castle won’t collapse.<br/> 🌐 What is End-to-End Testing?<br/>E2E testing is more like checking the entire castle once it’s built. You walk around, open doors, test if the drawbridge works, and make sure the dragon stays in its cave.<br/>In coding terms, E2E tests simulate real user interactions. They check if all the pieces of your app work together. For example, testing if a user can log in, navigate to a dashboard, and see their profile info — just like a real person would.<br/>- Pros: Catches issues you’d only see in real-world use, ensures everything works together.<br/>- Cons: Slower, more complex to set up, can break easily with small UI changes.<br/> 🥊 Which One is More Important?<br/>Honestly? Both! They serve different purposes:<br/>- Unit tests** catch tiny mistakes early and make debugging easier.<br/>- E2E tests** make sure your whole app actually works like users expect.<br/>If you have to choose, though, E2E tests often give you more confidence that your app won’t break for users. But relying only on E2E tests can slow you down, so the sweet spot is a balance: lots of small unit tests, plus a few key E2E tests to cover critical user flows.<br/> 🚀 Final Thoughts<br/>Testing isn’t the most exciting part of development, but it saves you from late-night panic when something breaks in production. Unit tests are like wearing a helmet, and E2E tests are like checking the whole bike before a race — why not do both?<br/>What’s your approach to testing? Let me know — I’d love to hear! 🧑‍💻",
        "img": "https://bugbug-homepage.s3.eu-central-1.amazonaws.com/small_Test_plan_template_14_5a350cd80c.png",
        "date": "2025-03-04"
      },
      "subject3": {
        "title": "QA, Backend, Frontend — What’s the Difference in Testing? And Why Do They All Matter?",
        "description": "Testing is like checking your work before turning it in — except in development, it saves you from shipping buggy features that break everything. But testing isn’t a one-size-fits-all deal. QA, backend, and frontend testing each have their own vibes. So, what’s the difference? Let’s break it down!<br/>🕵️‍♀️ QA Testing (Catching Bugs Like a Pro)<br/>QA (Quality Assurance) testers are the guardians of the final product. They test the app like a real user, clicking every button, filling out forms, and trying to break things. The goal? Find bugs that developers might’ve missed. <br/>QA testing usually involves:<br/>- Manual Testing: Clicking through the app to spot visual glitches or unexpected behavior.<br/>- Automated Testing: Using tools (like Selenium or Playwright) to run scripts that check if key features still work after updates.<br/>- End-to-End (E2E) Testing: Testing the whole flow of an app, from logging in to making a purchase, to make sure everything works together smoothly.<br/>⚙️ Backend Testing (Making Sure the Engine Runs)<br/>Backend testing focuses on what happens behind the scenes — the server, database, and APIs. Even if the UI looks flawless, things can fall apart if the backend logic is broken. <br/>Backend testing usually covers:<br/>- Unit Tests: Testing individual functions or methods (like checking if the password hash function works).<br/>- Integration Tests: Checking if different components work well together (like making sure your API correctly updates the database).<br/>- Performance Tests: Seeing how the server handles a bunch of users at once.<br/>Backend tests make sure the logic is solid, data is handled correctly, and your app doesn’t crash when things get busy.<br/>🎨 Frontend Testing (Keeping the UI in Shape)<br/>Frontend testing is all about making sure users can interact with the app smoothly. It focuses on the visible part — the buttons, forms, and animations that people actually see.<br/>Frontend testing usually involves:<br/>- Unit Tests: Testing small pieces of UI logic (like making sure a button shows the right text).<br/>- Component Tests: Checking if individual components (like a modal or a dropdown) render and behave properly.<br/>- Visual Regression Tests: Capturing screenshots of the UI to spot accidental design changes.<br/>Frontend tests help catch layout issues, broken interactions, and JavaScript errors that could mess up the user experience.<br/> 🚀 So, Which One Is More Important?<br/>Honestly? They all are! Testing from different angles makes sure your app works well inside and out. QA tests catch real-world issues, backend tests make sure the logic is solid, and frontend tests keep the UI looking sharp. The best apps are tested at every layer.<br/>What’s been your experience with testing? Are you more of a backend tester, a frontend bug hunter, or a QA wizard? Let me know — I’d love to hear! 🧑‍💻✨",
        "img": "https://mailtrap.io/wp-content/uploads/2022/05/Backend-Testing_Featured_img.png",
        "date": "2025-03-07"
      }
    },
    "Health": {
      "title": "Health & Fitness",
      "subject1": {
        "title": "Constansy is the key",
        "description": "On August 4, 2024, I made a decision—I was gonna run every single day. And let me tell you, at first, it sucked. Like, really sucked. It wasn’t like brushing my teeth or eating dinner; it felt like straight-up torture. <br/> The first week was all about just pushing through. I kept telling myself, Hey, you’ve been working out for a whole week now, that’s something! At first, I picked this really nice running spot, but it was kinda far from home. And guess what? That turned into the perfect excuse not to go. “Ugh, it’s too far,” “I’ll go tomorrow,” you know the drill. So, I switched to a spot right near my place—no more excuses. <br/>The first month? Brutal. It was hot, I kept finding reasons to skip, but slowly, things started changing. Before I started, I’d be gasping for air just running fast or climbing stairs. But after a month? No more heavy breathing. And that annoying belly fat I could always feel? Yeah, that was gone too. <br/>I won’t lie—every single day for the first five months, I had the same thoughts: I don’t wanna go out. Can’t I just skip today? But then, I’d remember something Cristiano Ronaldo (yep, I’m a football fan) once said: Even after all these years, I still don’t feel like going to training. That hit home.<br/>After five months, running finally started feeling like brushing my teeth—just another habit. And after nine months? I don’t just feel stronger physically, but mentally too. Like, if I can stick with this, I can do anything.<br/>Oh, and in case you’re wondering—nope, my weight hasn’t changed. But honestly? I don’t even care. I feel amazing, and that’s what really matters.",
        "img": "https://res.cloudinary.com/adidas-app/image/upload/c_limit,h_2532,q_auto:good,w_2532/v1/page-assets/8/akub2mfjn0rpc2ado4xd.jpeg",
        "date": "2025-02-19"
      },
      "subject2": {
        "title": "How to lose weight",
        "description": "You’ve probably heard about the keto diet, right? It’s been super popular for a while, and I’ve actually tried it twice. I didn’t have a huge amount of weight to lose — just around 5 kilos over my normal weight — but I wanted to feel lighter and healthier. Even with working out every day, I could only drop around 3 kilos. That’s when I decided to give keto a shot.<br/>**What Is the Keto Diet?**<br/>Keto is basically a way of eating where you cut way down on carbs (like bread, pasta, and sugar) and load up on healthy fats and moderate protein. The idea is to get your body into a state called ketosis, where it starts burning fat for energy instead of carbs. So, your meals end up being things like eggs, meat, cheese, avocados, and nuts — while saying goodbye to things like rice, potatoes, and sweets. It can be tough at first, but a lot of people (myself included) find that it works pretty well for weight loss and boosting energy.<br/>**My Experience with Keto**<br/>I went all in: no carbs, no sugar, for 2 months. And honestly? It worked. But after the first month, I realized that just cutting carbs wasn’t enough. I also had to reduce my portions — even protein — to keep losing weight. It turns out, eating unlimited steak and bacon doesn’t magically burn fat if you’re still overeating.<br/>Another thing I noticed is that almost everything has hidden sugar. You really have to check labels, even for things you wouldn’t expect! Plus, the food variety isn’t great. It’s a lot of meat, eggs, and cheese, so if you like diversity in your meals, it might get boring after a while.<br/>**Would I Do It Again?**<br/>Even though it’s hard to stick to for more than 2 months, I’d totally try keto again. It’s not something I’d do long-term, but as a short-term reset or to drop a few kilos, it works. And honestly, it’s kind of satisfying to see results so quickly.<br/>If you’re thinking about trying keto, my advice is: go for it, but be prepared. It’s not a magic fix, and you’ll need some discipline, but it can be a pretty powerful tool if you use it right.<br/>Would you ever try keto? Or have you already? Let me know — I’d love to hear about your experience!",
        "img": "https://www.health.com/thmb/McVo5I4voMdVDjKKrBBJRCW8Ox4=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/HowLongItTakesToLoseWeight-078592d9075a4a20bada42212f54f3c0.jpg",
        "date": "2025-02-22"
      },
      "subject3": {
        "title": "Work From Home? Here Are the Best Sports to Keep You Moving!",
        "description": "Working from home is great — no commute, comfy clothes, and unlimited snacks. But let’s be real: it’s way too easy to stay glued to your chair all day. Before you know it, your back hurts, your energy crashes, and you feel like a potato. 🥔 So, what sports or activities can help you stay fit and energized without leaving the house? Let’s break it down!<br/> 🧘‍♀️ Yoga (for when you need to stretch and de-stress)<br/>Sitting for hours messes with your body. Yoga is perfect to loosen up tight muscles and calm your mind. Even just 10–15 minutes can make a huge difference. Try following a YouTube video, or just do simple stretches like downward dog and child’s pose.<br/> 🏋️‍♀️ Strength Training (for when you wanna feel strong)<br/>You don’t need a fancy gym! Grab some resistance bands or use your body weight. Squats, push-ups, lunges — these classics are enough to build strength. Plus, short workouts (like 20 minutes) can give you a nice energy boost for the rest of the day.<br/> 🚶‍♀️ Walking (for when you need a break and fresh air)<br/>Okay, technically not a sport, but walking is a game-changer. Take a quick stroll around your neighborhood or even pace around your home during calls. It clears your mind, improves circulation, and gives you a mini reset.<br/> 🏃‍♂️ HIIT (for when you need to wake up fast)<br/>Feeling sluggish? High-Intensity Interval Training (HIIT) will wake you up! These short bursts of intense exercise followed by rest periods are perfect for a quick workout. Jumping jacks, burpees, mountain climbers — 15–20 minutes and you’ll feel like a champ.<br/> 🧗‍♀️ Desk Exercises (for when you can’t leave your desk)<br/>On a tight deadline? No worries! Try chair dips, seated leg raises, or shoulder rolls right at your desk. Even small movements help prevent stiffness and keep your blood flowing.<br/> 🏸 Fun Sports for After Work (if you want to go outside)<br/>If you can get outside, pick up something fun! Tennis, cycling, or even just shooting hoops can help you unwind and recharge.<br/> 🚀 Final Thoughts<br/>Working from home doesn’t mean being stuck in one spot all day. Move around, experiment with different activities, and find what makes you feel good. Your body (and your brain) will thank you!<br/>What’s your favorite way to stay active while working remotely? Let me know — I’d love to hear! 🏋️‍♀️",
        "img": "https://gdcitsolutions.com/wp-content/uploads/inPerson-Wfh-800.jpg",
        "date": "2025-03-06"
      }
    },
    "Others": {
      "title": "Others",
      "subject1": {
        "title": " How to Get Better at Managing Time as a Frontend Developer (While Leveling Up Your Skills)",
        "description": "Being a frontend developer is awesome — you get to create cool, interactive websites, play with animations, and make users' lives easier. But let’s be honest: it can also be overwhelming. There’s always a new framework popping up, endless bugs to fix, and deadlines breathing down your neck. So, how do you get better at handling your time without burning out? Let’s break it down!<br/>1. Prioritize Learning (But Don’t Try to Learn *Everything*)<br/>The frontend world moves fast, and it’s tempting to chase every shiny new tool. But not everything is worth your time. Pick the skills that truly align with your goals. Want to build modern, snappy UIs? Focus on frameworks like React or Vue. Interested in design? Get comfy with Tailwind and CSS animations. Set specific learning goals (like “learn React hooks this month”) so you can progress steadily without feeling scattered.<br/>2. Block Time for Deep Work<br/>Jumping between Slack messages, emails, and coding is a productivity killer. Try blocking a few hours for deep, focused work. Use tools like Pomodoro timers or apps like Notion to structure your tasks. When you're in a flow state, you'll get more done in less time, leaving you space to explore new tech or polish your side projects.<br/>3. Build, Build, Build<br/>Nothing beats hands-on experience. The more you build, the better you get. Even small projects help — like recreating a component you saw on Dribbble or coding a simple to-do app. Not only do you practice problem-solving, but you also create a portfolio that shows off your skills.<br/>4. Stay Curious and Connect with Others<br/>Follow other devs on platforms like Twitter or join dev communities (Discord, Reddit, etc.). Seeing what others are working on can inspire you and teach you new approaches. Plus, asking questions and sharing your progress helps you learn faster.<br/>5. Reflect and Refine<br/>Take time to reflect on what works and what doesn’t. Are you spending too much time debugging things that could be solved with better planning? Are tutorials eating up your day without leading to real progress? Adjust your habits and workflows as you grow.<br/>Final Thoughts<br/>Becoming a better frontend developer isn’t just about grinding through tutorials or chasing the latest trends. It’s about balancing learning, building, and taking care of yourself. Manage your time well, stay curious, and keep coding — you'll level up faster than you think.<br/>What are your favorite ways to improve as a developer? Let me know — I’d love to hear!",
        "img": "https://t3.ftcdn.net/jpg/03/91/99/28/360_F_391992895_jdfD6yVqnZ6uWyunjfuA6xVA0xNMvLIU.jpg",
        "date": "2025-03-03"
      },
      "subject2": {
        "title": "Why Do We Always Compare Frontend and Backend?",
        "description": "Why Do We Always Compare Frontend and Backend? <br/>Okay, seriously — why do people act like frontend and backend are rivals? It’s like comparing shoes to pants. They both serve a purpose, but you can’t wear one instead of the other (unless you’re really into experimental fashion, I guess).<br/>Frontend is all about what users see and interact with: buttons, forms, animations, and making things pretty. Backend is the hidden powerhouse — databases, servers, APIs — the stuff that makes everything actually work.<br/>Imagine building a car. Frontend is the sleek design, comfy seats, and the touch screen dashboard. Backend is the engine, transmission, and all the complex machinery under the hood. You wouldn’t argue that one is better — because without both, you’re not going anywhere.<br/>The magic happens when frontend and backend work together like a dream team. So instead of picking sides, let’s just appreciate how awesome it is when a killer UI and a powerful server make a seamless experience.<br/>Next time someone tries to start the frontend vs backend debate, just tell them: “You need both, just like you need shoes and pants.”",
        "img": "https://ultahost.com/blog/wp-content/uploads/2024/05/68-Comparison-FrontEnd-vs-BackEnd-Whats-The-Difference.png",
        "date": "2025-02-25"
      },
      "subject3": {
        "title": "How to maintain weight",
        "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut purus eget nunc",
        "img": "img1.jpg",
        "date": "2021-09-01"
      }
    }
  },
  "public": {
    "readMoreText": "...read more",
    "showLessText": "...show Less",
    "showMoreBtn": "Show more",
    "showLessBtn": "Show less",
    "back": "Back"
  }
}
